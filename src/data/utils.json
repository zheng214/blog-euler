{
  "arithmetic": {
    "description": "Contains algorithms for factorization, divisibility, and other miscellaneous algebra/number theory related tools",
    "isOdd": {
      "description": [
        "Check if a number is odd"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "number",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "func": "function isOdd(number) {\n  return !!(number & 1);\n}",
      "related": []
    },
    "isEven": {
      "description": [
        "Check if a number is even"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "number",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "func": "function isEven(number) {\n  return !(number & 1);\n}",
      "related": []
    },
    "listPrimeFactors": {
      "description": [
        "List the powers of prime factors of a number"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Number[]}",
        "description": "List of powers of prime factors of n"
      },
      "examples": [
        {
          "input": "12 ( = 2² * 3¹)",
          "output": "[0, 0, 2, 1]"
        },
        {
          "input": "20 ( = 2² * 3⁰ * 4⁰ * 5¹)",
          "output": "[0, 0, 2, 0, 0, 1]"
        }
      ],
      "func": "function listPrimeFactors(n) {\n  let dividend = n;\n  let divisor = 2;\n  const computedFactors = [0, 0];\n  while (dividend > 1) {\n    let power = 0;\n    while (dividend % divisor === 0) {\n      dividend /= divisor;\n      power++;\n    }\n    computedFactors[divisor] = power;\n    divisor++;\n  }\n  return computedFactors;\n}",
      "related": []
    },
    "gcd": {
      "description": [
        "Computes the greatest common divisor between 2 numbers using the euclidean algorithm"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "a",
          "description": "Positive integer"
        },
        {
          "type": "{Number}",
          "var": "b",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Number}",
        "description": "gcd(a, b)"
      },
      "examples": [
        {
          "input": "(12, 30)",
          "output": "6"
        }
      ],
      "func": "function gcd(a, b) {\n  if (!b) {\n    return a;\n  }\n\n  return gcd(b, a % b);\n}",
      "related": []
    },
    "isCoprime": {
      "description": [
        "Check whether two numbers are coprime"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "a",
          "description": "Positive integer"
        },
        {
          "type": "{Number}",
          "var": "b",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": "True iff a and b are coprime"
      },
      "examples": [
        {
          "input": "(12, 30)",
          "output": "false"
        },
        {
          "input": "(12, 17)",
          "output": "true"
        }
      ],
      "related": [],
      "func": "function isCoprime(a, b) {\n  return gcd(a, b) === 1;\n}"
    },
    "listProperDivisors": {
      "description": [
        "List the proper divisors of a number"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "number",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Number[]}",
        "description": "List of proper divisors of the input"
      },
      "examples": [
        {
          "input": "36",
          "output": "[1, 2, 3, 4, 6, 9, 12, 18]"
        }
      ],
      "func": "function listProperDivisors(number) {\n  const root = Math.sqrt(number);\n  const properDivisors = [];\n  let divisor = Math.floor(root);\n  if (divisor === root) {\n    properDivisors.push(root);\n    divisor--;\n  }\n  while (divisor > 0) {\n    const quotient = number / divisor;\n    if (Number.isInteger(quotient)) {\n      properDivisors.push(divisor);\n      if (divisor !== 1) {\n        properDivisors.push(quotient);\n      }\n    }\n    divisor--;\n  }\n  return properDivisors.sort((a, b) => a - b);\n}",
      "related": []
    },
    "computeSumOfDivisors": {
      "description": [
        "Find the sum of the proper divisors of a number"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "number",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Number}",
        "description": "Sum of the proper divisors of the input"
      },
      "examples": [
        {
          "input": "36",
          "output": "55"
        }
      ],
      "func": "function computeSumOfDivisors(number) {\n  const root = Math.sqrt(number);\n  let sum = 0;\n  let divisor = Math.floor(root);\n  if (divisor === root) {\n    sum += root;\n    divisor--;\n  }\n  while (divisor > 0) {\n    const quotient = number / divisor;\n    if (Number.isInteger(quotient)) {\n      sum += divisor;\n      if (divisor !== 1) {\n        sum += quotient;\n      }\n    }\n    divisor--;\n  }\n  return sum;\n}",
      "related": []
    },
    "reduceLCT": {
      "description": [
        "Reduce a fraction to its lowest common terms"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "numerator",
          "description": "Positive integer"
        },
        {
          "type": "{Number}",
          "var": "denominator",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Number[]}",
        "description": "Array containing the reduced numerator and denominator, respectively"
      },
      "examples": [
        {
          "input": "(12, 30)",
          "output": "[2, 5]"
        }
      ],
      "related": [],
      "func": "function reduceLCT(numerator, denominator) {\n  const greatestCommonDivisor = gcd(numerator, denominator);\n  return [numerator / greatestCommonDivisor, denominator / greatestCommonDivisor];\n}"
    },
    "generateTriangulars": {
      "description": [
        "Generates a table where the keys are the triangle numbers no greater than n"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Upper bound, inclusive"
        }
      ],
      "returns": {
        "type": "{Object}",
        "description": "The table of triangular number keys"
      },
      "examples": [
        {
          "input": "10",
          "output": "{ 1: true, 2: true, 3: true, 6: true, 10: true }"
        }
      ],
      "func": "function generateTriangulars(n) {\n  const table = {};\n  let triangle = 1;\n  let incr = 1;\n  while (triangle < n) {\n    table[triangle] = true;\n    incr++;\n    triangle += incr;\n  }\n  return table;\n}",
      "related": []
    },
    "toPolygonal": {
      "description": [
        "Finds the nth polygonal (with s sides) number"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Index of the polygon"
        },
        {
          "type": "{Number}",
          "var": "s",
          "description": "Sides of the polygon"
        }
      ],
      "returns": {
        "type": "{Number}",
        "description": ""
      },
      "examples": [
        {
          "input": "(4, 3)",
          "output": "10 // (4th triangular number)"
        },
        {
          "input": "(3, 5)",
          "output": "9 // (3rd pentagonal number)"
        }
      ],
      "func": "function toPolygonal(n, s) {\n  return (s - 2) * n * (n - 1) / 2 + n;\n}",
      "related": []
    },
    "isTriangular": {
      "description": [
        "Check if a number is triangular (e.g. 1, 2, 3, 6, 10, 15, ...)"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "func": "function isTriangular(n) {\n  return (Math.sqrt(1 + 8 * n) - 1) % 2 === 0;\n}",
      "related": []
    },
    "isPentagonal": {
      "description": [
        "Check if a number is pentagonal (e.g. 1, 5, 12, 22, 35, ...)"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "func": "function isPentagonal(n) {\n  // obtained using quadratic rule\n  return (1 + Math.sqrt(1 + 24 * n)) % 6 === 0;\n}",
      "related": []
    }
  },
  "combinatorics": {
    "description": "Contains helper functions for computing combinations (factorials, permutations, combinations, etc.)",
    "fact": {
      "description": [
        "Compute factorial of a number"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Positive integer"
        }
      ],
      "returns": {
        "type": "{Number}",
        "description": ""
      },
      "examples": [
        {
          "input": "8",
          "output": "40320"
        }
      ],
      "func": "function fact(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}",
      "related": []
    },
    "generateFactTable": {
      "description": [
        "Generate a table of n: n! key-value pairs"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Number of pairs to generate"
        }
      ],
      "returns": {
        "type": "{Object}",
        "description": ""
      },
      "examples": [
        {
          "input": "4",
          "output": "{ 0: 1, 1: 1, 2: 2, 3: 6, 4: 24, 5: 120 }"
        }
      ],
      "func": "function generateFactTable(n) {\n  const table = {\n    0: 1,\n  };\n  for (let i = 1; i <= n; i++) {\n    table[i] = table[i - 1] * i;\n  }\n  return table;\n}",
      "related": []
    },
    "convertToFactorialBase": {
      "description": [
        "Converts a number into its factorial representation"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "The number to convert"
        }
      ],
      "returns": {
        "type": "{String}",
        "description": "Number written in factorial representation"
      },
      "examples": [
        {
          "input": "12",
          "output": "'200'"
        },
        {
          "input": "13",
          "output": "'201'"
        },
        {
          "input": "14",
          "output": "'210'"
        },
        {
          "input": "16",
          "output": "'220'"
        },
        {
          "input": "20",
          "output": "'310'"
        },
        {
          "input": "24",
          "output": "'1000'"
        }
      ],
      "func": "function convertToFactorialBase(n) {\n  // we first need to determine the highest factorial number smaller than n\n  let i = 1;\n  let factorials = [1];\n  while (factorials[i - 1] * (i + 1) <= n) { // exit if next factorial is bigger than n\n    i++;\n    factorials.push(factorials[i - 2] * i);\n  }\n  factorials = factorials.reverse();\n  // i is the number of digits in our factorial representation of n\n  // factorials contains the list of factorials smaller than n, from biggest to smallest\n\n  let dividend = n;\n  let repr = '';\n  for (let j = 0; j < factorials.length; j++) {\n    const quotient = Math.floor(dividend / factorials[j]);\n    dividend %= factorials[j];\n    repr += quotient.toString();\n  }\n  return repr;\n}",
      "related": []
    },
    "getLexicalPermutation": {
      "description": [
        "Get the nth lexicographic permutation of arr (generalized function of problem 24)"
      ],
      "params": [
        {
          "type": "{Number|Number[]|String|String[]}",
          "var": "arr",
          "description": "List of characters"
        },
        {
          "type": "{Number}",
          "var": "n",
          "description": "nth permutation (n > 0)"
        }
      ],
      "returns": {
        "type": "{String[]}",
        "description": ""
      },
      "examples": [
        {
          "input": "('123', 1)",
          "output": "['1', '2', '3']"
        },
        {
          "input": "('123', 2)",
          "output": "['1', '3', '2']"
        },
        {
          "input": "('123', 3)",
          "output": "['2', '1', '3']"
        },
        {
          "input": "('123', 4)",
          "output": "['2', '3', '1']"
        },
        {
          "input": "('123', 5)",
          "output": "['3', '1', '2']"
        },
        {
          "input": "('123', 6)",
          "output": "['3', '2', '1']"
        }
      ],
      "func": "function getLexicalPermutation(arr, n) {\n  const result = [];\n\n  let remainingElements = [];\n  if (typeof arr === 'number') {\n    remainingElements = arr.toString().split('');\n  }\n  if (typeof arr === 'string') {\n    remainingElements = arr.split('');\n  }\n  if (Array.isArray(arr)) {\n    remainingElements = arr.map(x => x.toString());\n  }\n\n  const factorialRepr = convertToFactorialBase(n - 1).padStart(remainingElements.length - 1, '0');\n\n  for (let k = 0; k < factorialRepr.length; k++) {\n    const indexToPick = factorialRepr.charAt(k);\n    const pickedElement = remainingElements[indexToPick];\n    result.push(pickedElement);\n    remainingElements = remainingElements.filter(x => x !== pickedElement);\n  }\n\n  return [...result, ...remainingElements];\n}",
      "related": []
    },
    "choose": {
      "description": [
        "Computes n choose p, or the number of ways of selecting p sub-elements from n elements"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "The size of the set to select from"
        },
        {
          "type": "{Number}",
          "var": "p",
          "description": "The number of elements to select (p <= n)"
        }
      ],
      "returns": {
        "type": "{Number}",
        "description": ""
      },
      "examples": [
        {
          "input": "(4, 2)",
          "output": "6"
        },
        {
          "input": "(6, 3)",
          "output": "20"
        }
      ],
      "func": "function choose(n, p) {\n  return fact(n) / (fact(n - p) * fact(p));\n}",
      "related": []
    },
    "listOrderedCombinations": {
      "description": [
        "Enumerate the list of permutations of joining elements from 2 arrays",
        "where the elements within the same array are considered to be similar, and their orders are preserved"
      ],
      "params": [
        {
          "type": "{Array}",
          "var": "a1",
          "description": "First array (max length: 35)"
        },
        {
          "type": "{Array}",
          "var": "a2",
          "description": "Second array (max length: 35)"
        }
      ],
      "returns": {
        "type": "{Array[]}",
        "description": "List of combinations (each combination is an array)"
      },
      "examples": [
        {
          "input": "([1,0], [2,2])",
          "output": "[[1, 0, 2, 2], [1, 2, 0, 2], [1, 2, 2, 0], [2, 1, 0, 2], [2, 1, 2, 0], [2, 2, 1, 0]]"
        }
      ],
      "func": "function listOrderedCombinations(a1, a2) {\n  const f1 = [...lang.toArray(a1)];\n  const f2 = [...lang.toArray(a2)]; // convert strings and numbers into array\n  let baseArr = f2;\n  let insertArr = f1;\n  if ((f1.length + 1) ** f2.length < (f2.length + 1) ** f1.length) { // minimize loop count\n    baseArr = f1;\n    insertArr = f2;\n  }\n\n  const equivalenceTable = {};\n\n  // generate the table of unique insert rules\n  // insertRule := the indexes of the baseArr where to insert the elements of insertArr\n  // eg. baseArr.length = 2, insertArr.length = 2;\n  // insertRules = ['00', '01', '02', '10', '11', '12', '20', '21', '22']\n  // Also, since order must be preserved inside each array,\n  // rules such as 21, 10 cannot be allowed\n  for (let i = 0; i < (baseArr.length + 1) ** insertArr.length; i++) {\n    const insertRule = i.toString(baseArr.length + 1);\n    if (!equivalenceTable[insertRule.split('').sort().join('')]) {\n      equivalenceTable[insertRule.padStart(insertArr.length, '0')] = true;\n    }\n  }\n\n  // for each insert rule, insert the elements of insertArr into baseArr according to rules,\n  // then push result to combinations\n  const insertRules = Object.keys(equivalenceTable);\n  const combinations = [];\n\n  for (let i = 0; i < insertRules.length; i++) {\n    const elevatedBase = [[], ...baseArr.map(x => [x])];\n    const insertRule = insertRules[i];\n    insertRule.split('').forEach((insertIndex, idx) => {\n      const numeralIndex = /^[a-z]{1}$/.test(insertIndex)\n        ? insertIndex.charCodeAt(0) - 87 // a -> 10, b -> 11, ...\n        : +insertIndex;\n      elevatedBase[numeralIndex].push(insertArr[idx]);\n    });\n    combinations.push(elevatedBase.reduce((acc, curr) => [...acc, ...curr]));\n  }\n\n  // remove duplicate arrays\n  const uniqueCombinations = new Set(combinations.map(JSON.stringify));\n\n  return Array.from(uniqueCombinations, JSON.parse);\n}",
      "related": []
    }
  },
  "common": {
    "description": "Contains helper functions for code that are often used/repeated",
    "sumArray": {
      "description": [
        "'Sum' over all elements of an array, with a mapper applied to each element (similar to mapReduce)"
      ],
      "params": [
        {
          "type": "{Number[]|String[]}",
          "var": "arr",
          "description": "The array to sum"
        },
        {
          "type": "{Function}",
          "var": "f",
          "description": "Map function"
        },
        {
          "type": "{Number|String}",
          "var": "init",
          "description": "Initial value"
        }
      ],
      "returns": {
        "type": "{Number|String}",
        "description": ""
      },
      "examples": [
        {
          "input": "([1,2,3], x => 2 * x, 5)",
          "output": "17"
        }
      ],
      "func": "function sumArray(arr, f = x => x, init = 0) {\n  let sum = init;\n  for (let i = 0; i < arr.length; i++) {\n    sum += f(arr[i]);\n  }\n  return sum;\n}",
      "related": []
    },
    "contains": {
      "description": [
        "Check if the number n contains a digit d"
      ],
      "params": [
        {
          "type": "{Number|String}",
          "var": "n",
          "description": "The number from where we check the digits"
        },
        {
          "type": "{Number}",
          "var": "d",
          "description": "The digit"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "examples": [
        {
          "input": "(123, 3)",
          "output": "true"
        },
        {
          "input": "(14235968, 7)",
          "output": "false"
        }
      ],
      "func": "function contains(n, d) {\n  return n.toString().split('').some(x => +(x) === d);\n}",
      "related": []
    },
    "insertElementSorted": {
      "description": [
        "Insert an element into an array, keeping the array sorted from smallest to biggest"
      ],
      "params": [
        {
          "type": "{Array}",
          "var": "arr",
          "description": "The original array"
        },
        {
          "type": "{Number|String}",
          "var": "element",
          "description": "The element to insert"
        },
        {
          "type": "{Function}",
          "var": "insertLeft",
          "description": "The comparison function, will put the element to the left if it return true"
        }
      ],
      "returns": {
        "type": "{Array}",
        "description": "The array with inserted element"
      },
      "examples": [
        {
          "input": "([1,4,5], 3)",
          "output": "[1,3,4,5]"
        }
      ],
      "func": "function insertElementSorted(arr, element, insertLeft = (e, a) => e < a) {\n  const arrLen = arr.length;\n  if (arrLen === 0) {\n    return [element];\n  }\n  if (arrLen === 1) {\n    return insertLeft(element, arr[0]) ? [element, ...arr] : [...arr, element];\n  }\n  const middleIndex = Math.floor((arrLen) / 2);\n  const left = arr.slice(0, middleIndex);\n  const right = arr.slice(middleIndex, arrLen);\n  if (insertLeft(element, arr[middleIndex])) {\n    return [...insertElementSorted(left, element), ...right];\n  }\n  return [...left, ...insertElementSorted(right, element)];\n}",
      "related": []
    },
    "initTable": {
      "description": [
        "Initiate a table of size row x col"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "row",
          "description": "Number of arrays in the table"
        },
        {
          "type": "{Number}",
          "var": "col",
          "description": "Number of elements in each array"
        },
        {
          "type": "{Function}",
          "var": "f",
          "description": "Map function, where the inputs are the row and column indexes, respectively"
        }
      ],
      "returns": {
        "type": "{Array[]}",
        "description": "The result table (2D array)"
      },
      "examples": [
        {
          "input": "(2, 2, (i,j) => i * j)",
          "output": "[[0,0], [0,1]]"
        }
      ],
      "func": "function initTable(row, col, f = () => 0) {\n  return [...Array(row)].map((_1, i) => [...Array(col)].map((_2, j) => f(i, j)));\n}",
      "related": []
    }
  },
  "lang": {
    "description": "Contains helper functions for string/number formatting, checking properties of a string/number, etc.",
    "containsDuplicate": {
      "description": [
        "Check if the input contains any duplicate 'elements'",
        "If the input is a string, check for duplicate characters",
        "If the input is a number, check for duplicate digits",
        "If the input is an array, check for duplicate elements"
      ],
      "params": [
        {
          "type": "{Number|String|Number[]|String[]}",
          "var": "input",
          "description": ""
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "func": "function containsDuplicate(input) {\n  if (Array.isArray(input)) {\n    return (new Set(input)).size !== input.length;\n  }\n  if (typeof input === 'string') {\n    return containsDuplicate(input.split(''));\n  }\n  if (typeof input === 'number') {\n    return containsDuplicate(input.toString().split(''));\n  }\n}",
      "related": []
    },
    "toArray": {
      "description": [
        "split a number or string into a list of characters"
      ],
      "params": [
        {
          "type": "{Number|String}",
          "var": "param",
          "description": ""
        }
      ],
      "returns": {
        "type": "{String[]}",
        "description": ""
      },
      "func": "function toArray(param) {\n  if (typeof param === 'number') {\n    return param.toString().split('');\n  }\n  if (typeof param === 'string') {\n    return param.split('');\n  }\n  return param;\n}",
      "related": []
    },
    "flip": {
      "description": [
        "Reverse the digits of a number"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "number",
          "description": "The number to reverse"
        }
      ],
      "returns": {
        "type": "{Number}",
        "description": ""
      },
      "func": "function flip(number) {\n  return +number.toString().split('').reverse().join('');\n}",
      "related": []
    },
    "isPalindrome": {
      "description": [
        "Check if a number is a palindrome"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "number",
          "description": "The number to verify"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "func": "function isPalindrome(number) {\n  return number.toString().split('').reverse().join('') === number.toString();\n}",
      "related": []
    },
    "haveSameDigits": {
      "description": [
        "Check if every elements of an array have the same digit"
      ],
      "params": [
        {
          "type": "{Number[]|String[]}",
          "var": "arr",
          "description": "List of numbers to verify"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "examples": [
        {
          "input": "[123,321,213]",
          "output": "true"
        },
        {
          "input": "[123,324,213]",
          "output": "false"
        }
      ],
      "func": "function haveSameDigits(arr) {\n  const formatted = arr.map(String);\n  const digitTable = formatted[0].split('').reduce((a, c) => {\n    a[c] = a[c] ? a[c] + 1 : 1;\n    return a;\n  }, {});\n  const digitLength = formatted[0].split('').length;\n  return formatted.every((elem) => {\n    if (elem.split('').length !== digitLength) {\n      return false;\n    }\n    let satisfyCount = Object.keys(digitTable);\n    const clone = { ...digitTable };\n    let satisfied = true;\n    elem.split('').forEach((digit, _, a) => {\n      if (!clone[digit]) {\n        satisfied = false;\n        a.splice(1);\n        return null;\n      }\n      clone[digit] -= 1;\n      if (clone[digit] === 0) {\n        satisfyCount--;\n      }\n    });\n    return satisfied || satisfyCount === 0;\n  });\n}",
      "related": []
    }
  },
  "primes": {
    "description": "Contains helper functions related to prime numbers",
    "isPrime": {
      "description": [
        "Check if a number is prime, using a simple divisibility algorithm and a few heuristics"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "The integer to check"
        }
      ],
      "returns": {
        "type": "{Boolean}",
        "description": ""
      },
      "func": "function isPrime(n) {\n  // small numbers, edge cases\n  if (n < 4) {\n    return n > 1;\n  }\n\n  // check divisibility by 2 and 3\n  if (!(n & 1) || !(n % 3)) {\n    return false;\n  }\n\n  const upperBound = Math.floor(Math.sqrt(n));\n  let divisor = 5;\n\n  while (divisor <= upperBound) {\n    if (!(n % divisor) || !(n % (divisor + 2))) {\n      return false;\n    }\n    divisor += 6;\n  }\n  return true;\n}",
      "related": []
    },
    "generatePrimesTable": {
      "description": [
        "Generates a table in which the keys are all primes under n, using a optimized Sieve of Eratosthenes"
      ],
      "params": [
        {
          "type": "{Number}",
          "var": "n",
          "description": "Upper Bound"
        }
      ],
      "returns": {
        "type": "{Object}",
        "description": "The keys are the primes, the values are truthy placeholders"
      },
      "examples": [
        {
          "input": "15",
          "output": "{ 2: true, 3: true, 5: true, 7: true, 11: true, 13: true }"
        }
      ],
      "func": "function generatePrimesTable(n) {\n  // array where indexes represent all odd numbers, ie. each index i correspond to the ith odd number (except for 1)\n  // e.g. sieveArr[2] = true is equivalent of saying the 2nd odd number excluding 1 (ie. 5) is prime\n  const sieveArr = [];\n  const root = Math.sqrt(n);\n  for (let i = 1; i < root; i++) {\n    const realRepr = 2 * i + 1; // e.g. i = 2 -> 2nd odd number -> 5\n    if (sieveArr[i] !== false) { // if index is not already sieved\n      sieveArr[i] = true; // then it must be prime\n      // since the indexes represent the odd numbers, we only need to sieve up to a multiple(j) such that:\n      // (ith odd number) * j < n => (2*i+1)*j < n => i * j < n/(2*i+1)\n\n      // sieve all odd multiples of i\n      // e.g. let i = 3 -> we must sieve 9, 15, 21, ...\n      // therefore we sieve their corresponding indexes -> 4, 7, 10, ...\n      let j = 3;\n      while (realRepr * j <= n) {\n        // convert a real index representation to its odd counterpart\n        // e.g 5 -> 2\n        const oddRepr = (realRepr * j - 1) / 2;\n        sieveArr[oddRepr] = false;\n        j += 2;\n      }\n    }\n  }\n  const table = {};\n  for (let k = 0; k <= (n - 1) / 2; k++) {\n    if (k === 0) {\n      table[2] = true;\n    } else if (sieveArr[k] !== false) {\n      table[2 * k + 1] = true;\n    }\n  }\n  return table;\n\n  // performance: intel i5 9400F\n  // 1000: < 0.1ms\n  // 10K: 2.436ms\n  // 100K: 5.967ms\n  // 1M: 57ms\n  // 5M: 382ms\n  // 10M: 919.793ms\n  // 50M: 7376.009ms\n  // 90M: 10404.120ms\n}",
      "related": []
    }
  }
}